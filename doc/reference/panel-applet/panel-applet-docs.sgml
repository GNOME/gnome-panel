<?xml version="1.0" standalone="no"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<book id="index" xmlns:xi="http://www.w3.org/2003/XInclude">

  <bookinfo>
    <title>Panel Applet Library Reference Manual</title>
  </bookinfo>

  <part id="overview">
   <title>Panel Applet Library Overview</title>

    <para>
     Applets are small applications that are embedded in the GNOME panel. They can be used to give quick access to some features, or to display the state of something specific.
    </para>

   <para>
     The Panel Applet library is what should be used to write applets as it handles all the communication with the GNOME panel. It hides all of the embedding process of the applet behind a <link linkend="PanelApplet"><type>PanelApplet</type></link> widget. It also provides <link linkend="PanelApplet"><type>PanelApplet</type></link> API to properly integrate the applet in the panel.
   </para>

   <note><simpara>
    Keep in mind that starting with GNOME 3, the panel and applets are only available in the fallback mode. An applet will therefore not be usable in the default GNOME that users may use.
   </simpara></note>

  </part>

  <part id="getting-started">
    <title>Getting Started with the Panel Applet library</title>

   <chapter id="getting-started.intro">
    <title>Introduction</title>

    <para>
     While applets are rather simple to write, they are not the most easy form of interaction to users for two reasons: it is not intuitive how to add or remove applets for many users, and the restriction in size of applets can limit their interface. Therefore, before writing an applet, think hard whether this is the form of interaction that is best for the feature you want to provide.
    </para>

    <note><simpara>
     Keep in mind that starting with GNOME 3, the panel and applets are only available in the fallback mode. An applet will therefore not be usable in the default GNOME that users may use.
    </simpara></note>

   </chapter>

   <chapter id="getting-started.concepts">
    <title>Concepts</title>

    <sect2 id="getting-started.concepts.applet-types">
     <title>Applet Types</title>

     <para>
      The applet type is the identifier representing a type of applets to the panel. It is a simple string, like <constant>HelloWorldApplet</constant> and is unique per <link linkend="getting-started.concepts.applet-factory">applet factory</link>.
     </para>

    </sect2>

    <sect2 id="getting-started.concepts.applet-factory">
     <title>Applet Factory</title>

     <para>
      The applet factory is an implementation detail that is mostly hidden by the Panel Applet library, but it still appears in a few places (<link linkend="PANEL-APPLET-OUT-PROCESS-FACTORY:CAPS"><function>PANEL_APPLET_OUT_PROCESS_FACTORY()</function></link>, <link linkend="PANEL-APPLET-IN-PROCESS-FACTORY:CAPS"><function>PANEL_APPLET_IN_PROCESS_FACTORY()</function></link> and <link linkend="getting-started.install.panel-applet"><filename>.panel-applet</filename> files</link>) so it is important to understand what is an applet factory.
     </para>

     <para>
      The applet factory is the object that will create a new applet instance when the panel requests a new applet to be created. It is identified with a simple string id, for example <constant>HelloWorldFactory</constant>.
     </para>

     <para>
      The requests the applet factory will receive from the panel specify which type of applet should be created. This is what makes it possible to have more than one applet types in one applet binary. In most cases, however, the applet factory will be specific to only one applet type. The map between applet types and the applet factory is recorded in <link linkend="getting-started.install.panel-applet"><filename>.panel-applet</filename> files</link>.
     </para>

     <para>
      There is only one applet factory per applet binary, and it is always running before any applet instance is created by the applet binary. The applet factory is created via <link linkend="PANEL-APPLET-OUT-PROCESS-FACTORY:CAPS"><function>PANEL_APPLET_OUT_PROCESS_FACTORY()</function></link> or <link linkend="PANEL-APPLET-IN-PROCESS-FACTORY:CAPS"><function>PANEL_APPLET_IN_PROCESS_FACTORY()</function></link>.
     </para>

    </sect2>

    <sect2 id="getting-started.concepts.applet-instances">
     <title>Applet Instances</title>

     <para>
      There is no restriction as to how many instances of one applet type can be created. The user might choose to add more than one <constant>HelloWorldApplet</constant> applets to his panels. This can have some implications on the design used to write applets. The most important implication is that it is generally wrong to have global variables to keep a state specific to an applet instance.
     </para>

    </sect2>

   </chapter>

   <chapter id="getting-started.example">
    <title>Hello World Example</title>

    <para>
     An example is worth a million words, so here is a simple one:
    </para>

    <example id="getting-started.example.simple">
     <title>Hello World applet</title>
     <programlisting language="c">
#include &lt;gtk/gtk.h&gt;
#include &lt;panel-applet.h&gt;

static gboolean
hello_world_applet_start (PanelApplet *applet)
{
    GtkWidget *label;

    label = gtk_label_new ("Hello World");
    gtk_container_add (GTK_CONTAINER (applet), label);
    gtk_widget_show_all (GTK_WIDGET (applet));

    return TRUE;
}

static gboolean
hello_world_factory_callback (PanelApplet  *applet,
                              const gchar  *iid,
                              gpointer      data)
{
    gboolean retval = FALSE;

    if (g_strcmp0 (iid, "HelloWorldApplet") == 0)
        retval = hello_world_applet_start (applet);

    return retval;
}

PANEL_APPLET_OUT_PROCESS_FACTORY ("HelloWorldFactory",
                                  PANEL_TYPE_APPLET,
                                  hello_world_factory_callback,
                                  NULL)
     </programlisting>
    </example>

    <para>
     Here are the few things that are important in this example:
    </para>

    <itemizedlist>
     <listitem>
      <para>
       <link linkend="PANEL-APPLET-OUT-PROCESS-FACTORY:CAPS"><function>PANEL_APPLET_OUT_PROCESS_FACTORY()</function></link>: this creates an <link linkend="getting-started.concepts.applet-factory">applet factory</link> named <constant>HelloWorldFactory</constant>, and each time this applet factory will create an applet instance, it will call <function>hello_world_factory_callback()</function> with a <link linkend="PanelApplet"><type>PanelApplet</type></link> object already created.
      </para>
     </listitem>
     <listitem>
      <para>
      <function>hello_world_factory_callback()</function>: this checks if the request to create an applet instance is for an <link linkend="getting-started.concepts.applet-types">applet type</link> supported by the <link linkend="getting-started.concepts.applet-factory">applet factory</link>. Here we can see that we only support the <constant>HelloWorldApplet</constant> applet type. This function returns <constant>TRUE</constant> on success and <constant>FALSE</constant> on failures.
      </para>
     </listitem>
     <listitem>
      <para>
      <function>hello_world_applet_start()</function>: this is where we actually setup the <link linkend="PanelApplet"><type>PanelApplet</type></link> widget for the work the applet should do. This can include filling the widget, connecting to signals, etc.
      </para>
     </listitem>
    </itemizedlist>

    <para>
     While the previous example is simple, it can be useful to directly subclass the <link linkend="PanelApplet"><type>PanelApplet</type></link> type. This makes it easy to have a per-applet instance private structure, among other benefits.
    </para>

    <example id="getting-started.example.subclass">
     <title>Hello World applet, with a PanelApplet subclass</title>
     <programlisting language="c">
#include &lt;gtk/gtk.h&gt;
#include &lt;panel-applet.h&gt;

#define HELLO_WORLD_TYPE_APPLET (hello_world_applet_get_type ())

typedef struct _HelloWorldApplet        HelloWorldApplet;
typedef struct _HelloWorldAppletClass   HelloWorldAppletClass;
typedef struct _HelloWorldAppletPrivate HelloWorldAppletPrivate;

struct _HelloWorldApplet {
    PanelApplet parent_object;

    /*&lt; private &gt;*/
    HelloWorldAppletPrivate *priv;
};

struct _HelloWorldAppletClass {
    PanelAppletClass parent_class;
};

struct _HelloWorldAppletPrivate
{
    GtkWidget *label;
};

static GType hello_world_applet_get_type (void) G_GNUC_CONST;

G_DEFINE_TYPE (HelloWorldApplet, hello_world_applet, PANEL_TYPE_APPLET);

static void
hello_world_applet_init (HelloWorldApplet *applet)
{
    applet->priv = G_TYPE_INSTANCE_GET_PRIVATE (applet, HELLO_WORLD_TYPE_APPLET,
                                                HelloWorldAppletPrivate);

    applet->priv->label = gtk_label_new ("Hello World");
    gtk_container_add (GTK_CONTAINER (applet), applet->priv->label);
    gtk_widget_show (applet->priv->label);
}

static void
hello_world_applet_class_init (HelloWorldAppletClass *klass)
{
  g_type_class_add_private (class, sizeof (HelloWorldAppletPrivate));
}

static gboolean
hello_world_applet_start (HelloWorldApplet *applet)
{
    gtk_widget_show (GTK_WIDGET (applet));

    return TRUE;
}

static gboolean
hello_world_factory_callback (HelloWorldApplet *applet,
                              const gchar      *iid,
                              gpointer          data)
{
    gboolean retval = FALSE;

    if (g_strcmp0 (iid, "HelloWorldApplet") == 0)
        retval = hello_world_applet_start (applet);

    return retval;
}

PANEL_APPLET_OUT_PROCESS_FACTORY ("HelloWorldFactory",
                                  HELLO_WORLD_TYPE_APPLET,
                                  (PanelAppletFactoryCallback) hello_world_factory_callback,
                                  NULL)
     </programlisting>
    </example>

   </chapter>

   <chapter id="getting-started.context-menu">
    <title>Using a Context Menu</title>

    <para>
     The Panel Applet library uses <type>GtkAction</type> to define menu items appearing in the context menu of the applet.
    </para>

    <sect2 id="getting-started.context-menu.content">
     <title>Guidelines for Context Menu</title>

     <para>
      To help guarantee consistency in the interaction with applets, there are some guidelines that are recommended to follow:
     </para>

     <itemizedlist>
      <listitem>
       <para>
        Do not make the context menu too long: if you have more than five or six menu items, then it might be worth investing efforts on rethinking what is important in the menu.
       </para>
      </listitem>
      <listitem>
       <para>
        For the menu item that will enable the user to configure the applet, use "Preferences" for the label, and try to avoid "Configure", "Configuration", "Settings", etc.
       </para>
      </listitem>
      <listitem>
       <para>
        Avoid putting a "Help" menu item. The user will usually explicitly add the applet, so it is expected that he knows what the applet is about. Putting a "Help" menu item in the context menu is therefore too prominent. It might make sense to add a "Help" button in the Preferences dialog, though.
       </para>
      </listitem>
      <listitem>
       <para>
        If you agree, avoid putting a "About" menu item. To the user, applets are not different applications but elements of one global application, the panel. Of course, this means that credits for working on the applet are not visible to the user.
       </para>
      </listitem>
     </itemizedlist>

    </sect2>

    <sect2 id="getting-started.context-menu.setup">
     <title>Setting Up the Menu</title>

     <para>
      The only part of dealing with a context menu that is specific to applets is how to setup the context menu. Once it is setup, this is really just a matter of using <type>GtkAction</type>.
     </para>

     <para>
      To setup the context menu of the applet, the <link linkend="panel-applet-setup-menu-from-file"><function>panel_applet_setup_menu_from_file()</function></link> function should be used, with a path to a <link linkend="getting-started.context-menu.xml-file">menu XML file</link> and a <type>GtkActionGroup</type> object containing all actions that are used in the menu XML file. The example below shows how to achieve this:
     </para>

     <example>
     <title>Hello World applet, with a context menu</title>
      <programlisting language="c">
#include &lt;glib/gi18n.h&gt;
#include &lt;gtk/gtk.h&gt;
#include &lt;panel-applet.h&gt;

/* This would usually be defined in config.h */
#define GETTEXT_PACKAGE "hello-world"
/* This would usually be defined in Makefile.am */
#define HELLO_WORLD_UI_DIR "/usr/share/hello-world"

static void hello_world_applet_prefs (GtkAction   *action,
                                      PanelApplet *applet);
static void hello_world_applet_say   (GtkAction   *action,
                                      PanelApplet *applet);

static const GtkActionEntry hello_world_menu_actions [] = {
        { "HelloWorldPrefs", GTK_STOCK_HELP, N_("_Preferences"),
          NULL, NULL,
          G_CALLBACK (hello_world_applet_prefs) },
        { "HelloWorldSay", GTK_STOCK_ABOUT, N_("_Say Hello"),
          NULL, NULL,
          G_CALLBACK (hello_world_applet_say) }
};

static void
hello_world_applet_prefs (GtkAction   *action,
                          PanelApplet *applet)
{
    GtkWidget *dialog;
    dialog = gtk_message_dialog_new (NULL, 0,
                                    GTK_MESSAGE_INFO, GTK_BUTTONS_CLOSE,
                                    "Preferences");
    g_signal_connect (dialog, "response",
                      G_CALLBACK (gtk_widget_destroy), NULL);
    gtk_widget_show (dialog);
}

static void
hello_world_applet_say (GtkAction   *action,
                        PanelApplet *applet)
{
    GtkWidget *dialog;
    dialog = gtk_message_dialog_new (NULL, 0,
                                    GTK_MESSAGE_INFO, GTK_BUTTONS_CLOSE,
                                    "Hello World!");
    g_signal_connect (dialog, "response",
                      G_CALLBACK (gtk_widget_destroy), NULL);
    gtk_widget_show (dialog);
}

static gboolean
hello_world_applet_start (PanelApplet *applet)
{
    GtkWidget *label;
    GtkActionGroup *action_group;
    gchar *ui_path;

    label = gtk_label_new ("Hello World");
    gtk_container_add (GTK_CONTAINER (applet), label);

    action_group = gtk_action_group_new ("Hello World Applet Actions");
    gtk_action_group_set_translation_domain (action_group, GETTEXT_PACKAGE);
    gtk_action_group_add_actions (action_group,
                                  hello_world_menu_actions,
                                  G_N_ELEMENTS (hello_world_menu_actions),
                                  applet);

    ui_path = g_build_filename (HELLO_WORLD_UI_DIR, "hello-world-menu.xml", NULL);
    panel_applet_setup_menu_from_file (applet, ui_path, action_group);

    g_free (ui_path);
    g_object_unref (action_group);

    gtk_widget_show_all (GTK_WIDGET (applet));

    return TRUE;
}

static gboolean
hello_world_factory_callback (PanelApplet  *applet,
                              const gchar  *iid,
                              gpointer      data)
{
    gboolean retval = FALSE;

    if (g_strcmp0 (iid, "HelloWorldApplet") == 0)
        retval = hello_world_applet_start (applet);

    return retval;
}

PANEL_APPLET_OUT_PROCESS_FACTORY ("HelloWorldFactory",
                                  PANEL_TYPE_APPLET,
                                  hello_world_factory_callback,
                                  NULL)
      </programlisting>
     </example>

     <para>
      Here are the changes compared to the <link linkend="getting-started.example.simple">simple example</link> with no context menu:
     </para>

    <itemizedlist>
     <listitem>
      <para>
       We define a list of <type>GtkActionEntry</type> entries: <constant>hello_world_menu_actions</constant>. This will be used later on to build <type>GtkAction</type> objects, with their label and callback. We obviously implement the callbacks.
      </para>
     </listitem>
     <listitem>
      <para>
       We change <function>hello_world_applet_start()</function> to define a <type>GtkActionGroup</type> object, to which we add, with <function>gtk_action_group_add_actions()</function>, <type>GtkAction</type> objects based on the <type>GtkActionEntry</type> entries. Note that the the last argument to <function>gtk_action_group_add_actions()</function> will be passed as user data to the callbacks.
      </para>
     </listitem>
     <listitem>
      <para>
       We also change <function>hello_world_applet_start()</function> to add this <type>GtkActionGroup</type> object to the context menu of the applet, by calling <link linkend="panel-applet-setup-menu-from-file"><function>panel_applet_setup_menu_from_file()</function></link>. This function takes as argument a path to the <link linkend="getting-started.context-menu.xml-file">menu XML file</link> that will define how to display the <type>GtkAction</type> objects in the context menu.
      </para>
     </listitem>
    </itemizedlist>

    </sect2>

    <sect2 id="getting-started.context-menu.xml-file">
     <title>Menu XML File</title>

     <para>
      The file that is used to setup menu with the <link linkend="panel-applet-setup-menu-from-file"><function>panel_applet_setup_menu_from_file()</function></link> function is a <type>GtkUIManager</type> UI definition file, without the top-level <constant>&lt;ui&gt;</constant> tag. It must only contain menuitem entries and separators. For example:
     </para>

     <informalexample>
      <programlisting>
&lt;menuitem name="Hello World Prefs" action="HelloWorldPrefs" /&gt;
&lt;separator/&gt;
&lt;menuitem name="Hello World Say"   action="HelloWorldSay" /&gt;
      </programlisting>
     </informalexample>

    <para>
     Alternatively, the <link linkend="panel-applet-setup-menu"><function>panel_applet_setup_menu()</function></link> function can be used with a string containing directly the XML.
    </para>

    </sect2>

   </chapter>

   <chapter id="getting-started.settings">
    <title>Settings</title>

    <para>
     There are two main design patterns to store settings for an applet:
    </para>

    <itemizedlist>
     <listitem>
      <para>
       Global settings: those are settings that should be shared among all instances of the same applets. For instance, the preferred unit for temperature is something that the user will want to set only one. The way to store those settings is in no way specific to the Panel Applet library, as it should work like in any other application.
      </para>
     </listitem>
     <listitem>
      <para>
       Per-applet instance settings: those are settings that might be different depending on the instance of an applet. For instance, an applet whose goal is to display a picture should make it possible for the user to choose a different picture for each instance of the applet. The Panel Applet library provides API to help with this.
      </para>
     </listitem>
    </itemizedlist>

    <para>
     There is actually a third case, which is rather rare, though: per-screen settings. It might be that some applets control some per-screen settings, like the layout of the workspaces. There is currently no API to help with this as it is a very specific case that you will probably never have to deal with for a usual applet.
    </para>

     TODO: describe settings-oriented API
   </chapter>

   <chapter id="getting-started.install">
    <title>Making the Applet Visible to the Panel</title>

    <para>
     Simply installing the applet binary will obviously not be enough to make this applet working in the panel. Two files should be installed for this:
    </para>

    <itemizedlist>
     <listitem>
      <para>
       a <filename>.panel-applet</filename> file so that the panel knows that the applet.
      </para>
     </listitem>
     <listitem>
      <para>
       a D-Bus service file to autostart the binary when the panel wants to create an applet.
      </para>
     </listitem>
    </itemizedlist>

    <sect2 id="getting-started.install.panel-applet">
     <title>Panel Applet File</title>

     <para>
      The <filename>.panel-applet</filename> file is a key file about the applet binary, describing the <link linkend="getting-started.concepts.applet-factory">applet factory</link> from the binary and the <link linkend="getting-started.concepts.applet-types">applet types</link> this factory can create.
     </para>

     <sect3>
      <title>Example</title>
      <informalexample>
       <programlisting>
[Applet Factory]
Id=HelloWorldFactory
Name=Hello World Applet Factory
Description=Factory for the window navigation related applets

[HelloWorldApplet]
Name=Hello World
Description=Factory for the Hello World applet example
Icon=hello-world-icon
       </programlisting>
      </informalexample>
     </sect3>

     <sect3>
      <title>Format</title>
      <para>
       The file must contain a <constant>Applet Factory</constant> group with the following keys:
      </para>

      <itemizedlist>
       <listitem>
        <para>
         <constant>Id</constant> (string): the identifier of the applet factory. This must be the same name that will be used as the first parameter to <link linkend="PANEL-APPLET-OUT-PROCESS-FACTORY:CAPS"><function>PANEL_APPLET_OUT_PROCESS_FACTORY()</function></link> or <link linkend="PANEL-APPLET-IN-PROCESS-FACTORY:CAPS"><function>PANEL_APPLET_IN_PROCESS_FACTORY()</function></link>.
        </para>
       </listitem>
       <listitem>
        <para>
         <constant>InProcess</constant> (boolean, optional): whether the applet should be <link linkend="getting-started.in-out-process">in-process or out-of-process</link>. By default, the applet is out-of-process.
        </para>
       </listitem>
       <listitem>
        <para>
         <constant>Location</constant> (string): the path to the applet binary. Only mandatory if <constant>InProcess</constant> is <constant>true</constant>.
        </para>
       </listitem>
       <listitem>
        <para>
         <constant>Name</constant> (localized string, optional): the name of the applet factory. For example: <constant>Hello World Factory</constant>.
        </para>
       </listitem>
       <listitem>
        <para>
         <constant>Description</constant> (localized string, optional): the description of the applet factory. For example: <constant>Factory for the Hello World applet example</constant>.
        </para>
       </listitem>
      </itemizedlist>

      <para>
       For each applet type, it must also contain a group named with the applet type identifier. Such a group must have the following keys:
      </para>

      <itemizedlist>
       <listitem>
        <para>
         <constant>Name</constant> (localized string): the name of the applet type. For example: <constant>Hello World</constant>.
        </para>
       </listitem>
       <listitem>
        <para>
         <constant>Description</constant> (localized string, optional): the description of the applet type. For example: <constant>Hello World applet example</constant>.
        </para>
       </listitem>
       <listitem>
        <para>
         <constant>Icon</constant> (string, optional): the icon name of the applet type. For example: <constant>hello-world-icon</constant>. It can also be the path to an icon, but this not recommended.
        </para>
       </listitem>
       <listitem>
        <para>
         <constant>BonoboId</constant> (list of strings, optional): a list of bonobo id. This will tell the panel that this applet type can be used instead of a bonobo applet if the bonobo applet id is in this list.
        </para>
       </listitem>
      </itemizedlist>

     </sect3>

     <sect3>
      <title>Installation</title>
      <para>
       The <filename>.panel-applet</filename> file must be installed in a specific directory to be discoverable by the panel. You can fetch this directory during <constant>configure</constant> withe following code:
      </para>

      <informalexample>
       <programlisting>
LIBPANEL_APPLET_DIR=`$PKG_CONFIG --variable=libpanel_applet_dir libpanelapplet-4.0`
AC_SUBST(LIBPANEL_APPLET_DIR)
       </programlisting>
      </informalexample>

     </sect3>

    </sect2>

    <sect2 id="getting-started.install.dbus-service">
     <title>D-Bus Service File</title>

     <para>
      The communication between the panel and the applet factory is done over D-Bus. When creating an applet, the panel will send a message to the D-Bus service of the applet factory. If the D-Bus service is not running yet, it must be started automatically. We use D-Bus activation for this, which requires install a standard D-Bus service file. Please refer to the <ulink url="http://dbus.freedesktop.org/doc/dbus-specification.html#message-bus-starting-services">D-Bus documentation</ulink> for more information about D-Bus service files.
     </para>

     <para>
      This is only needed for <link linkend="getting-started.in-out-process">out-of-process applets</link>, because in-process applets do no need to have their binary autostarted for obvious reasons.
     </para>

    </sect2>

   </chapter>

   <chapter id="getting-started.integration">
    <title>Proper Integration with the Panel</title>

    <para>
     Since the applets appear as part of the panel to users, it is important that they behave in a consistent way. A few steps can be completed to achieve proper integration.
    </para>

    <sect2 id="getting-started.integration.background">
     <title>Panel Background</title>

     <para>
     The panel can have different types of background, depending on how the user configures the panel. By default, applets do not respect the background that is configured and can therefore look out of place.
     </para>

     <para>
      The <link linkend="panel-applet-set-background-widget"><function>panel_applet_set_background_widget()</function></link> function can be used to automatically have the right background drawn for a specific widget. Just using this function on the <link linkend="PanelApplet"><type>PanelApplet</type></link> object itself, or its child is usually enough to have proper background integration.
     </para>

     <para>
      In some rare cases, though, <link linkend="panel-applet-set-background-widget"><function>panel_applet_set_background_widget()</function></link> will not be enough. The solution is then to connect to the <link linkend="PanelApplet-change-background"><function>"change-background"</function></link> signal of the <link linkend="PanelApplet"><type>PanelApplet</type></link> object: it will be emitted when the background has changed, and it will provide the <type>cairo_pattern_t</type> pattern to use as a basis to draw the background.
     </para>

    </sect2>

    <sect2 id="getting-started.integration.lockdown">
     <title>Panel Lockdown</title>

     <para>
      The panel has proper support for lockdown, and when it is locked down, it is expected that all applets behave consistently in a lockdown mode too. This generally means that the preferences of the applet should not be accessible, but it could also imply a restriction on the behavior of the applet.
     </para>

     <para>
      The <link linkend="panel-applet-get-locked-down"><function>panel_applet_get_locked_down()</function></link> function can be used to query the state of the panel lockdown. It is also possible to react to changes by monitoring the <link linkend="PanelApplet--locked-down"><function>"locked-down"</function></link> property of the <link linkend="PanelApplet"><type>PanelApplet</type></link> object. You can achieve this by connecting to the <function>"notify::locked-down"</function> event.
     </para>

     <para>
       In most cases, the <type>GBinding</type> API is enough to respect the panel lockdown: <function>g_object_bind_property()</function> can be used to automatically update the visiblity of a menu item in the context menu of the applet. In the following example, the <function>"HelloWorldPrefs"</function> action (which is an action from the context menu) will only be displayed if the panel is not locked down.

      <informalexample>
       <programlisting language="c">
action = gtk_action_group_get_action (action_group, "HelloWorldPrefs");
g_object_bind_property (applet, "locked-down",
                        action, "visible",
                        G_BINDING_DEFAULT|G_BINDING_INVERT_BOOLEAN|G_BINDING_SYNC_CREATE);
       </programlisting>
      </informalexample>

      <para>
       It is obviously possible to use <function>g_object_bind_property()</function> to change the visibility of widgets that appear outside of the context menu, like a button in a window.
      </para>

     </para>

    </sect2>

   </chapter>

   <chapter id="getting-started.in-out-process">
    <title>Out-of-Process vs In-Process</title>

    <para>
     Applets can either live in their own process ("out-of-process") or in the panel process ("in-process"). The decision to choose one or the other is done at build time, with the macro that you use to define the applet factory: <link linkend="PANEL-APPLET-OUT-PROCESS-FACTORY:CAPS"><function>PANEL_APPLET_OUT_PROCESS_FACTORY()</function></link> is used for out-of-process applets while <link linkend="PANEL-APPLET-IN-PROCESS-FACTORY:CAPS"><function>PANEL_APPLET_IN_PROCESS_FACTORY()</function></link> is used for in-process applets. Obviously, only one of those two macros can be used.
    </para>

    <para>
      For most practical matters, from the applet perspective, the two options are the same. In-process applets do offer a slightly better performance when the applet is loaded, but this should not affect much the user experience. However, an in-process applet can potentially affect the whole behavior of the panel, especially in case of crashes or memory corruptions: a crash in an in-process applet will crash the whole panel. It is therefore recommended to use out-of-process applets.
    </para>
   </chapter>

   <chapter id="getting-started.introspection">
    <title>Writing an applet in languages other than C</title>

    <para>
     The Panel Applet library comes with support for <ulink url="http://live.gnome.org/GObjectIntrospection">GObject Introspection</ulink>. This makes it possible to write applets in the languages that have <ulink url="http://live.gnome.org/GObjectIntrospection/Users">bindings based on GObject Introspection</ulink>.
    </para>

    <para>
     Here is a simple example of a python applet:

     <example>
      <title>Hello World applet, in Python</title>
      <programlisting language="python">
from gi.repository import Gtk
from gi.repository import PanelApplet

def applet_fill(applet):
    label = Gtk.Label("Hello World")
    applet.add(label)
    applet.show_all()

def applet_factory(applet, iid, data):
    if iid != "HelloWorldApplet":
       return False

    applet_fill(applet)

    return True

PanelApplet.Applet.factory_main("HelloWorldFactory",
                                PanelApplet.Applet.__gtype__,
                                applet_factory, None)
      </programlisting>
     </example>
    </para>

    <para>
     The only limitation of writing an applet in a language other than C is that the applet will not be able to run in the panel process: it will have to stay out-of-process. However, since it is recommended to leave applets out-of-process, this limitation is mitigated.
    </para>
   </chapter>

  </part>

  <part id="port-gnome2">
    <title>Porting Applets from GNOME 2.x</title>

   <refsect1 id="port-gnome2.dbus">
    <title>Porting a D-Bus-based Applet</title>

    <para>
     There is no major issue porting a D-Bus-based applet from GNOME 2.x, from a Panel Applet library perspective. It is actually likely that the main issues will be that the applet has to be ported to GTK+ 3. Please refer to the <ulink url="http://library.gnome.org/devel/gtk3/stable/gtk-migrating-2-to-3.html">GTK+ 2 to GTK+ 3 migration guide</ulink> for this.
    </para>

   </refsect1>

   <refsect1 id="port-gnome2.bonobo">
    <title>Porting a Bonobo-based Applet</title>

    <para>
     Please see the <ulink url="http://live.gnome.org/GnomeGoals/AppletsDbusMigration">documentation</ulink> on the wiki.
    </para>

   </refsect1>

  </part>

  <part id="reference">
    <title>API Reference</title>

    <xi:include href="xml/applet.xml"/>
    <xi:include href="xml/applet-factory.xml"/>
  </part>

</book>
