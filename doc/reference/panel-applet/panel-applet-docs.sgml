<!doctype book PUBLIC "-//Davenport//DTD DocBook V3.0//EN" [
<!ENTITY PanelApplet SYSTEM "sgml/panel-applet.sgml">
]>
<book id="libpanel-applet">
  <bookinfo>
    <title>Panel Applet Writer's Reference Manual</title>
    <authorgroup>
      <author>
        <firstname>Mark</firstname>
        <surname>McLoughlin</surname>
        <affiliation>
          <address>
            <email>mark@skynet.ie</email>
          </address>
        </affiliation>
      </author>
    </authorgroup>

    <copyright>
      <year>2001</year>
      <holder>Mark McLoughlin</holder>
    </copyright>

    <abstract>
      <para>This manual documents the interfaces of the panel applet
      writing library for GNOME 2.x and a short guide to porting
      applets from the GNOME 1.x interfaces.
      </para>
    </abstract>

  </bookinfo>

  <chapter id="applet-writing">
    <title>Writing Applets</title>

    <para>Writing applets is very simple. You take some boiler plate
code like below, change a couple of things and write the code that
implements your widgetry. The hardest part is writing your widgetry -
and its completely up to yourself how hard that should be.</para>

    <sect1 id="hello-world">
      <title>Hello World Applet</title>

      <para>As usual, following the pointless tradition of starting with
an example of how get 'Hello World' on the screen in some form, here's
just about the simplest applet you could write.</para>

      <programlisting>
#include &lt;string.h&gt;

#include &lt;panel-applet.h&gt;
#include &lt;gtk/gtklabel.h&gt;

static BonoboObject *
hello_applet_new ()
{
        PanelApplet *applet;
        GtkWidget   *label;

        label = gtk_label_new ("Hello World");

        applet = panel_applet_new (label);

        return BONOBO_OBJECT (panel_applet_get_control (applet));
}

static BonoboObject *
hello_applet_factory (BonoboGenericFactory *this,
                      const gchar          *iid,
                      gpointer              data)
{
        BonoboObject *applet = NULL;

        if (!strcmp (iid, "OAFIID:GNOME_HelloApplet"))
                applet = hello_applet_new ();

        return applet;
}


PANEL_APPLET_BONOBO_FACTORY ("OAFIID:GNOME_HelloApplet_Factory",
                             "The Hello World Applet",
                             "0",
                             hello_applet_factory,
                             NULL)
      </programlisting>

      <para>The code here is very similar to writing a normal Bonobo
control. You define a factory using PANEL_APPLET_BONOBO_FACTORY(),
passing it a factory functions like hello_applet_factory().</para>

      <para>To crete a #PanelApplet object, you first should set up
the widgets for you applet and then call panel_applet_new(), passing the
top-level widget of the applet. For example, if you were writing a
cdplayer applet, you would stuff all the buttons for cdplayer into a
#GtkHBox, and then call</para>

     <programlisting>panel_applet_new (hbox);</programlisting>
   </sect1>

    <sect1 id="applet-popups">
      <title>Defining a Popup Context Menu</title>

      <para>FIXME: write</para>
    </sect1>

    <sect1 id="panel-signals">
      <title>Detecting Changes in the Panel.</title>

      <para>FIXME: write</para>
    </sect1>

    <sect1 id="session-saving">
      <title>Session/Preference Saving.</title>

      <para>FIXME: write</para>
    </sect1>

    <sect1 id="multi-applets">
      <title>Multiple Applets</title>

      <para>FIXME: write</para>
    </sect1>

  </chapter>

  <chapter id="applet-porting">
    <title>Porting Applets from the GNOME 1.x interfaces</title>

      <para>FIXME: write</para>
  </chapter>

  <chapter id="panel-applet">
    <title>The Panel Applet Library</title>

    &PanelApplet;
  </chapter>
</book>
