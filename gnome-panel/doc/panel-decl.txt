<MACRO>
<NAME>HAVE_SAVE_SESSION_SIGNAL</NAME>
#define HAVE_SAVE_SESSION_SIGNAL 1
</MACRO>
<MACRO>
<NAME>HAVE_APPLET_BIND_EVENTS</NAME>
#define HAVE_APPLET_BIND_EVENTS 1
</MACRO>
<MACRO>
<NAME>HAVE_PANEL_PIXEL_SIZE</NAME>
#define HAVE_PANEL_PIXEL_SIZE 1
</MACRO>
<MACRO>
<NAME>HAVE_PANEL_DRAW_SIGNAL</NAME>
#define HAVE_PANEL_DRAW_SIGNAL 1
</MACRO>
<MACRO>
<NAME>HAVE_APPLET_QUEUE_RESIZE</NAME>
#define HAVE_APPLET_QUEUE_RESIZE 1
</MACRO>
<TYPEDEF>
<NAME>PanelOrientType</NAME>
typedef GNOME_Panel_OrientType PanelOrientType;
</TYPEDEF>
<MACRO>
<NAME>ORIENT_UP</NAME>
#define ORIENT_UP GNOME_Panel_ORIENT_UP
</MACRO>
<MACRO>
<NAME>ORIENT_DOWN</NAME>
#define ORIENT_DOWN GNOME_Panel_ORIENT_DOWN
</MACRO>
<MACRO>
<NAME>ORIENT_LEFT</NAME>
#define ORIENT_LEFT GNOME_Panel_ORIENT_LEFT
</MACRO>
<MACRO>
<NAME>ORIENT_RIGHT</NAME>
#define ORIENT_RIGHT GNOME_Panel_ORIENT_RIGHT
</MACRO>
<TYPEDEF>
<NAME>PanelBackType</NAME>
typedef GNOME_Panel_BackType PanelBackType;
</TYPEDEF>
<MACRO>
<NAME>PANEL_BACK_NONE</NAME>
#define PANEL_BACK_NONE GNOME_Panel_BACK_NONE
</MACRO>
<MACRO>
<NAME>PANEL_BACK_COLOR</NAME>
#define PANEL_BACK_COLOR GNOME_Panel_BACK_COLOR
</MACRO>
<MACRO>
<NAME>PANEL_BACK_PIXMAP</NAME>
#define PANEL_BACK_PIXMAP GNOME_Panel_BACK_PIXMAP
</MACRO>
<MACRO>
<NAME>APPLET_WIDGET</NAME>
#define APPLET_WIDGET(obj)          GTK_CHECK_CAST (obj, applet_widget_get_type (), AppletWidget)
</MACRO>
<MACRO>
<NAME>APPLET_WIDGET_CLASS</NAME>
#define APPLET_WIDGET_CLASS(klass)  GTK_CHECK_CLASS_CAST (klass, applet_widget_get_type (), AppletWidgetClass)
</MACRO>
<MACRO>
<NAME>IS_APPLET_WIDGET</NAME>
#define IS_APPLET_WIDGET(obj)       GTK_CHECK_TYPE (obj, applet_widget_get_type ())
</MACRO>
<STRUCT>
<NAME>AppletWidgetPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>AppletWidget</NAME>
</STRUCT>
<USER_FUNCTION>
<NAME>AppletCallbackFunc</NAME>
<RETURNS>void </RETURNS>
AppletWidget *applet, gpointer data
</USER_FUNCTION>
<STRUCT>
<NAME>AppletWidget</NAME>
struct AppletWidget
{
	GtkPlug			window;
	
	/*< public >*/
	char			*privcfgpath;
	char			*globcfgpath;
	
	/* you should really use the accessors for these anyway */
	PanelOrientType		orient;			
	int			size;			
	
	/*< private >*/
	AppletWidgetPrivate	*_priv;
};
</STRUCT>
<STRUCT>
<NAME>AppletWidgetClass</NAME>
</STRUCT>
<USER_FUNCTION>
<NAME>AppletFactoryActivator</NAME>
<RETURNS>GtkWidget *</RETURNS>
const char *goad_id, const char **params, int nparams
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>AppletFactoryQuerier</NAME>
<RETURNS>gboolean </RETURNS>
const char *goad_id
</USER_FUNCTION>
<FUNCTION>
<NAME>applet_widget_get_type</NAME>
<RETURNS>guint 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>applet_factory_new</NAME>
<RETURNS>void  </RETURNS>
const char *goad_id,AppletFactoryQuerier qfunc,AppletFactoryActivator afunc
</FUNCTION>
<FUNCTION>
<NAME>applet_widget_new</NAME>
<RETURNS>GtkWidget *</RETURNS>
const char *goad_id
</FUNCTION>
<FUNCTION>
<NAME>applet_widget_construct</NAME>
<RETURNS>void 	</RETURNS>
AppletWidget* applet, const char *goad_id
</FUNCTION>
<FUNCTION>
<NAME>applet_widget_set_tooltip</NAME>
<RETURNS>void 	</RETURNS>
AppletWidget *applet,const char *text
</FUNCTION>
<FUNCTION>
<NAME>applet_widget_set_widget_tooltip</NAME>
<RETURNS>void 	</RETURNS>
AppletWidget *applet,GtkWidget *widget,const char *text
</FUNCTION>
<FUNCTION>
<NAME>applet_widget_add</NAME>
<RETURNS>void 	</RETURNS>
AppletWidget *applet,GtkWidget *widget
</FUNCTION>
<FUNCTION>
<NAME>applet_widget_add_full</NAME>
<RETURNS>void 	</RETURNS>
AppletWidget *applet,GtkWidget *widget,gboolean bind_events
</FUNCTION>
<FUNCTION>
<NAME>applet_widget_bind_events</NAME>
<RETURNS>void 	</RETURNS>
AppletWidget *applet,GtkWidget *widget
</FUNCTION>
<FUNCTION>
<NAME>applet_widget_remove</NAME>
<RETURNS>void 	</RETURNS>
AppletWidget *applet
</FUNCTION>
<FUNCTION>
<NAME>applet_widget_register_callback</NAME>
<RETURNS>void 	</RETURNS>
AppletWidget *applet,const char *name,const char *menutext,AppletCallbackFunc func,gpointer data
</FUNCTION>
<FUNCTION>
<NAME>applet_widget_register_stock_callback</NAME>
<RETURNS>void 	</RETURNS>
AppletWidget *applet,const char *name,const char *stock_type,const char *menutext,AppletCallbackFunc func,gpointer data
</FUNCTION>
<FUNCTION>
<NAME>applet_widget_unregister_callback</NAME>
<RETURNS>void 	</RETURNS>
AppletWidget *applet,const char *name
</FUNCTION>
<FUNCTION>
<NAME>applet_widget_register_callback_dir</NAME>
<RETURNS>void 	</RETURNS>
AppletWidget *applet,const char *name,const char *menutext
</FUNCTION>
<FUNCTION>
<NAME>applet_widget_register_stock_callback_dir</NAME>
<RETURNS>void 	</RETURNS>
AppletWidget *applet,const char *name,const char *stock_type,const char *menutext
</FUNCTION>
<FUNCTION>
<NAME>applet_widget_unregister_callback_dir</NAME>
<RETURNS>void 	</RETURNS>
AppletWidget *applet,const char *name
</FUNCTION>
<FUNCTION>
<NAME>applet_widget_callback_set_sensitive</NAME>
<RETURNS>void 	</RETURNS>
AppletWidget *applet,const char *name,gboolean sensitive
</FUNCTION>
<FUNCTION>
<NAME>applet_widget_get_applet_count</NAME>
<RETURNS>int 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>applet_widget_sync_config</NAME>
<RETURNS>void 	</RETURNS>
AppletWidget *applet
</FUNCTION>
<FUNCTION>
<NAME>applet_widget_get_panel_orient</NAME>
<RETURNS>PanelOrientType 	</RETURNS>
AppletWidget *applet
</FUNCTION>
<FUNCTION>
<NAME>applet_widget_get_panel_pixel_size</NAME>
<RETURNS>int 	</RETURNS>
AppletWidget *applet
</FUNCTION>
<FUNCTION>
<NAME>applet_widget_get_free_space</NAME>
<RETURNS>int 	</RETURNS>
AppletWidget *applet
</FUNCTION>
<FUNCTION>
<NAME>applet_widget_send_position</NAME>
<RETURNS>void 	</RETURNS>
AppletWidget *applet,gboolean enable
</FUNCTION>
<FUNCTION>
<NAME>applet_widget_send_draw</NAME>
<RETURNS>void 	</RETURNS>
AppletWidget *applet,gboolean enable
</FUNCTION>
<FUNCTION>
<NAME>applet_widget_get_rgb_bg</NAME>
<RETURNS>void 	</RETURNS>
AppletWidget *applet,guchar **rgb,int *w, int *h,int *rowstride
</FUNCTION>
<FUNCTION>
<NAME>applet_widget_queue_resize</NAME>
<RETURNS>void 	</RETURNS>
AppletWidget *applet
</FUNCTION>
<FUNCTION>
<NAME>applet_widget_init</NAME>
<RETURNS>gboolean 	</RETURNS>
const char *app_id,const char *app_version,int argc,char **argv,struct poptOption *options,unsigned int flags,poptContext *return_ctx
</FUNCTION>
<FUNCTION>
<NAME>applet_widget_abort_load</NAME>
<RETURNS>void 	</RETURNS>
AppletWidget *applet
</FUNCTION>
<FUNCTION>
<NAME>applet_widget_gtk_main</NAME>
<RETURNS>void 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>applet_widget_gtk_main_quit</NAME>
<RETURNS>void 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>applet_widget_panel_quit</NAME>
<RETURNS>void 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>applet_widget_corba_activate</NAME>
<RETURNS>CORBA_Object  </RETURNS>
GtkWidget *applet,PortableServer_POA poa,const char *goad_id,const char **params,gpointer *impl_ptr,CORBA_Environment *ev
</FUNCTION>
<FUNCTION>
<NAME>applet_widget_corba_deactivate</NAME>
<RETURNS>void  </RETURNS>
PortableServer_POA poa,const char *goad_id,gpointer impl_ptr,CORBA_Environment *ev
</FUNCTION>
<MACRO>
<NAME>APPLET_ACTIVATE</NAME>
#define APPLET_ACTIVATE(func, goad_id, apldat) { CORBA_Environment ev; CORBA_exception_init(&ev); \
CORBA_Object_release(func(CORBA_ORB_resolve_initial_references(gnome_CORBA_ORB(), \
"RootPOA", &ev), goad_id, NULL, apldat, &ev), &ev); CORBA_exception_free(&ev); }
</MACRO>
<MACRO>
<NAME>APPLET_DEACTIVATE</NAME>
#define APPLET_DEACTIVATE(func, goad_id, apldat) { CORBA_Environment ev; CORBA_exception_init(&ev); \
func(CORBA_ORB_resolve_initial_references(gnome_CORBA_ORB(), "RootPOA", &ev), goad_id, apldat, &ev); CORBA_exception_free(&ev); }
</MACRO>
<MACRO>
<NAME>STATUS_DOCKLET</NAME>
#define STATUS_DOCKLET(obj)          GTK_CHECK_CAST (obj, status_docklet_get_type (), StatusDocklet)
</MACRO>
<MACRO>
<NAME>STATUS_DOCKLET_CLASS</NAME>
#define STATUS_DOCKLET_CLASS(klass)  GTK_CHECK_CLASS_CAST (klass, status_docklet_get_type (), StatusDockletClass)
</MACRO>
<MACRO>
<NAME>IS_STATUS_DOCKLET</NAME>
#define IS_STATUS_DOCKLET(obj)       GTK_CHECK_TYPE (obj, status_docklet_get_type ())
</MACRO>
<STRUCT>
<NAME>StatusDocklet</NAME>
</STRUCT>
<STRUCT>
<NAME>StatusDockletClass</NAME>
</STRUCT>
<MACRO>
<NAME>STATUS_DOCKLET_INFINITE</NAME>
#define STATUS_DOCKLET_INFINITE INT_MAX
</MACRO>
<MACRO>
<NAME>STATUS_DOCKLET_RETRY_EVERY</NAME>
#define STATUS_DOCKLET_RETRY_EVERY 15
</MACRO>
<MACRO>
<NAME>STATUS_DOCKLET_DEFAULT_RETRIES</NAME>
#define STATUS_DOCKLET_DEFAULT_RETRIES 20 /*retry for 5 minutes before giving up*/
</MACRO>
<STRUCT>
<NAME>StatusDocklet</NAME>
struct StatusDocklet
{
	GtkObject		object;
	
	/*< public >*/
	GtkWidget		*plug; /* a pointer to the current GtkPlug
					  holding the docklet */
	
	/*< private >*/
	GNOME_StatusSpot	sspot;
	
	int			tries; /*if we are set to trying to find the panel,
					 here is the count of our failed tries, we
					 try every 15 seconds*/
	int			maximum_retries; /*the maximum retries, default is*/
	guint			handle_restarts:1; /*handle panel restarts, by just looking
						     for the panel again for some time*/
	int			timeout_handle; /*handle for the retry timeout*/
};
</STRUCT>
<FUNCTION>
<NAME>status_docklet_get_type</NAME>
<RETURNS>guint 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>status_docklet_new</NAME>
<RETURNS>GtkObject *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>status_docklet_new_full</NAME>
<RETURNS>GtkObject *</RETURNS>
int maximum_retries,gboolean handle_restarts
</FUNCTION>
<FUNCTION>
<NAME>status_docklet_run</NAME>
<RETURNS>void 	</RETURNS>
StatusDocklet *docklet
</FUNCTION>
<MACRO>
<NAME>ORBIT_IDL_SERIAL</NAME>
#define ORBIT_IDL_SERIAL 9
</MACRO>
<MACRO>
<NAME>gnome_panel_H</NAME>
#define gnome_panel_H 1
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_GNOME_PanelSpot</NAME>
#define ORBIT_DECL_GNOME_PanelSpot 1
</MACRO>
<MACRO>
<NAME>GNOME_PanelSpot__free</NAME>
#define GNOME_PanelSpot__free CORBA_Object__free
</MACRO>
<TYPEDEF>
<NAME>GNOME_PanelSpot</NAME>
   typedef CORBA_Object GNOME_PanelSpot;
</TYPEDEF>
<VARIABLE>
<NAME>GNOME_PanelSpot__classid</NAME>
   extern CORBA_unsigned_long GNOME_PanelSpot__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_PanelSpot_0</NAME>
#define TC_IMPL_TC_GNOME_PanelSpot_0 'g'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_PanelSpot_1</NAME>
#define TC_IMPL_TC_GNOME_PanelSpot_1 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_PanelSpot_2</NAME>
#define TC_IMPL_TC_GNOME_PanelSpot_2 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_PanelSpot_3</NAME>
#define TC_IMPL_TC_GNOME_PanelSpot_3 'm'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_PanelSpot_4</NAME>
#define TC_IMPL_TC_GNOME_PanelSpot_4 'e'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_PanelSpot_5</NAME>
#define TC_IMPL_TC_GNOME_PanelSpot_5 '_'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_PanelSpot_6</NAME>
#define TC_IMPL_TC_GNOME_PanelSpot_6 'p'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_PanelSpot_7</NAME>
#define TC_IMPL_TC_GNOME_PanelSpot_7 'a'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_PanelSpot_8</NAME>
#define TC_IMPL_TC_GNOME_PanelSpot_8 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_PanelSpot_9</NAME>
#define TC_IMPL_TC_GNOME_PanelSpot_9 'e'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_PanelSpot_10</NAME>
#define TC_IMPL_TC_GNOME_PanelSpot_10 'l'
</MACRO>
<MACRO>
<NAME>TC_GNOME_PanelSpot</NAME>
#define TC_GNOME_PanelSpot ((CORBA_TypeCode)&TC_GNOME_PanelSpot_struct)
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_GNOME_Applet</NAME>
#define ORBIT_DECL_GNOME_Applet 1
</MACRO>
<MACRO>
<NAME>GNOME_Applet__free</NAME>
#define GNOME_Applet__free CORBA_Object__free
</MACRO>
<TYPEDEF>
<NAME>GNOME_Applet</NAME>
   typedef CORBA_Object GNOME_Applet;
</TYPEDEF>
<VARIABLE>
<NAME>GNOME_Applet__classid</NAME>
   extern CORBA_unsigned_long GNOME_Applet__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Applet_0</NAME>
#define TC_IMPL_TC_GNOME_Applet_0 'g'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Applet_1</NAME>
#define TC_IMPL_TC_GNOME_Applet_1 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Applet_2</NAME>
#define TC_IMPL_TC_GNOME_Applet_2 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Applet_3</NAME>
#define TC_IMPL_TC_GNOME_Applet_3 'm'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Applet_4</NAME>
#define TC_IMPL_TC_GNOME_Applet_4 'e'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Applet_5</NAME>
#define TC_IMPL_TC_GNOME_Applet_5 '_'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Applet_6</NAME>
#define TC_IMPL_TC_GNOME_Applet_6 'p'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Applet_7</NAME>
#define TC_IMPL_TC_GNOME_Applet_7 'a'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Applet_8</NAME>
#define TC_IMPL_TC_GNOME_Applet_8 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Applet_9</NAME>
#define TC_IMPL_TC_GNOME_Applet_9 'e'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Applet_10</NAME>
#define TC_IMPL_TC_GNOME_Applet_10 'l'
</MACRO>
<MACRO>
<NAME>TC_GNOME_Applet</NAME>
#define TC_GNOME_Applet ((CORBA_TypeCode)&TC_GNOME_Applet_struct)
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_GNOME_StatusSpot</NAME>
#define ORBIT_DECL_GNOME_StatusSpot 1
</MACRO>
<MACRO>
<NAME>GNOME_StatusSpot__free</NAME>
#define GNOME_StatusSpot__free CORBA_Object__free
</MACRO>
<TYPEDEF>
<NAME>GNOME_StatusSpot</NAME>
   typedef CORBA_Object GNOME_StatusSpot;
</TYPEDEF>
<VARIABLE>
<NAME>GNOME_StatusSpot__classid</NAME>
   extern CORBA_unsigned_long GNOME_StatusSpot__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_StatusSpot_0</NAME>
#define TC_IMPL_TC_GNOME_StatusSpot_0 'g'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_StatusSpot_1</NAME>
#define TC_IMPL_TC_GNOME_StatusSpot_1 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_StatusSpot_2</NAME>
#define TC_IMPL_TC_GNOME_StatusSpot_2 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_StatusSpot_3</NAME>
#define TC_IMPL_TC_GNOME_StatusSpot_3 'm'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_StatusSpot_4</NAME>
#define TC_IMPL_TC_GNOME_StatusSpot_4 'e'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_StatusSpot_5</NAME>
#define TC_IMPL_TC_GNOME_StatusSpot_5 '_'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_StatusSpot_6</NAME>
#define TC_IMPL_TC_GNOME_StatusSpot_6 'p'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_StatusSpot_7</NAME>
#define TC_IMPL_TC_GNOME_StatusSpot_7 'a'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_StatusSpot_8</NAME>
#define TC_IMPL_TC_GNOME_StatusSpot_8 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_StatusSpot_9</NAME>
#define TC_IMPL_TC_GNOME_StatusSpot_9 'e'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_StatusSpot_10</NAME>
#define TC_IMPL_TC_GNOME_StatusSpot_10 'l'
</MACRO>
<MACRO>
<NAME>TC_GNOME_StatusSpot</NAME>
#define TC_GNOME_StatusSpot ((CORBA_TypeCode)&TC_GNOME_StatusSpot_struct)
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_GNOME_Panel</NAME>
#define ORBIT_DECL_GNOME_Panel 1
</MACRO>
<MACRO>
<NAME>GNOME_Panel__free</NAME>
#define GNOME_Panel__free CORBA_Object__free
</MACRO>
<TYPEDEF>
<NAME>GNOME_Panel</NAME>
   typedef CORBA_Object GNOME_Panel;
</TYPEDEF>
<VARIABLE>
<NAME>GNOME_Panel__classid</NAME>
   extern CORBA_unsigned_long GNOME_Panel__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_0</NAME>
#define TC_IMPL_TC_GNOME_Panel_0 'g'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_1</NAME>
#define TC_IMPL_TC_GNOME_Panel_1 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_2</NAME>
#define TC_IMPL_TC_GNOME_Panel_2 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_3</NAME>
#define TC_IMPL_TC_GNOME_Panel_3 'm'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_4</NAME>
#define TC_IMPL_TC_GNOME_Panel_4 'e'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_5</NAME>
#define TC_IMPL_TC_GNOME_Panel_5 '_'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_6</NAME>
#define TC_IMPL_TC_GNOME_Panel_6 'p'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_7</NAME>
#define TC_IMPL_TC_GNOME_Panel_7 'a'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_8</NAME>
#define TC_IMPL_TC_GNOME_Panel_8 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_9</NAME>
#define TC_IMPL_TC_GNOME_Panel_9 'e'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_10</NAME>
#define TC_IMPL_TC_GNOME_Panel_10 'l'
</MACRO>
<MACRO>
<NAME>TC_GNOME_Panel</NAME>
#define TC_GNOME_Panel ((CORBA_TypeCode)&TC_GNOME_Panel_struct)
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_Color_0</NAME>
#define TC_IMPL_TC_GNOME_Panel_Color_0 'g'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_Color_1</NAME>
#define TC_IMPL_TC_GNOME_Panel_Color_1 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_Color_2</NAME>
#define TC_IMPL_TC_GNOME_Panel_Color_2 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_Color_3</NAME>
#define TC_IMPL_TC_GNOME_Panel_Color_3 'm'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_Color_4</NAME>
#define TC_IMPL_TC_GNOME_Panel_Color_4 'e'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_Color_5</NAME>
#define TC_IMPL_TC_GNOME_Panel_Color_5 '_'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_Color_6</NAME>
#define TC_IMPL_TC_GNOME_Panel_Color_6 'p'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_Color_7</NAME>
#define TC_IMPL_TC_GNOME_Panel_Color_7 'a'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_Color_8</NAME>
#define TC_IMPL_TC_GNOME_Panel_Color_8 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_Color_9</NAME>
#define TC_IMPL_TC_GNOME_Panel_Color_9 'e'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_Color_10</NAME>
#define TC_IMPL_TC_GNOME_Panel_Color_10 'l'
</MACRO>
<MACRO>
<NAME>TC_GNOME_Panel_Color</NAME>
#define TC_GNOME_Panel_Color ((CORBA_TypeCode)&TC_GNOME_Panel_Color_struct)
</MACRO>
<FUNCTION>
<NAME>GNOME_Panel_Color__alloc</NAME>
<RETURNS>GNOME_Panel_Color  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>GNOME_Panel_Color__free</NAME>
<RETURNS>gpointer  </RETURNS>
gpointer mem, gpointer dat,CORBA_boolean free_strings
</FUNCTION>
<MACRO>
<NAME>ORBIT_DECL_CORBA_sequence_CORBA_octet</NAME>
#define ORBIT_DECL_CORBA_sequence_CORBA_octet 1
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_octet_0</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_0 'g'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_octet_1</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_1 'n'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_octet_2</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_2 'o'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_octet_3</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_3 'm'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_octet_4</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_4 'e'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_octet_5</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_5 '_'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_octet_6</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_6 'p'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_octet_7</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_7 'a'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_octet_8</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_8 'n'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_octet_9</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_9 'e'
</MACRO>
<MACRO>
<NAME>ORBIT_IMPL_CORBA_sequence_CORBA_octet_10</NAME>
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_10 'l'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_octet_0</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_0 'g'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_octet_1</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_1 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_octet_2</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_2 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_octet_3</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_3 'm'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_octet_4</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_4 'e'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_octet_5</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_5 '_'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_octet_6</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_6 'p'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_octet_7</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_7 'a'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_octet_8</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_8 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_octet_9</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_9 'e'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_CORBA_sequence_CORBA_octet_10</NAME>
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_10 'l'
</MACRO>
<MACRO>
<NAME>TC_CORBA_sequence_CORBA_octet</NAME>
#define TC_CORBA_sequence_CORBA_octet ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_octet_struct)
</MACRO>
<FUNCTION>
<NAME>CORBA_sequence_CORBA_octet__alloc</NAME>
<RETURNS>CORBA_sequence_CORBA_octet  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>CORBA_sequence_CORBA_octet__free</NAME>
<RETURNS>gpointer  </RETURNS>
gpointer mem,gpointer dat,CORBA_boolean free_strings
</FUNCTION>
<FUNCTION>
<NAME>CORBA_sequence_CORBA_octet_allocbuf</NAME>
<RETURNS>CORBA_octet  *</RETURNS>
CORBA_unsigned_long len
</FUNCTION>
<TYPEDEF>
<NAME>GNOME_Panel_RgbData</NAME>
   typedef CORBA_sequence_CORBA_octet GNOME_Panel_RgbData;
</TYPEDEF>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_RgbData_0</NAME>
#define TC_IMPL_TC_GNOME_Panel_RgbData_0 'g'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_RgbData_1</NAME>
#define TC_IMPL_TC_GNOME_Panel_RgbData_1 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_RgbData_2</NAME>
#define TC_IMPL_TC_GNOME_Panel_RgbData_2 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_RgbData_3</NAME>
#define TC_IMPL_TC_GNOME_Panel_RgbData_3 'm'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_RgbData_4</NAME>
#define TC_IMPL_TC_GNOME_Panel_RgbData_4 'e'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_RgbData_5</NAME>
#define TC_IMPL_TC_GNOME_Panel_RgbData_5 '_'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_RgbData_6</NAME>
#define TC_IMPL_TC_GNOME_Panel_RgbData_6 'p'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_RgbData_7</NAME>
#define TC_IMPL_TC_GNOME_Panel_RgbData_7 'a'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_RgbData_8</NAME>
#define TC_IMPL_TC_GNOME_Panel_RgbData_8 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_RgbData_9</NAME>
#define TC_IMPL_TC_GNOME_Panel_RgbData_9 'e'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_RgbData_10</NAME>
#define TC_IMPL_TC_GNOME_Panel_RgbData_10 'l'
</MACRO>
<MACRO>
<NAME>TC_GNOME_Panel_RgbData</NAME>
#define TC_GNOME_Panel_RgbData ((CORBA_TypeCode)&TC_GNOME_Panel_RgbData_struct)
</MACRO>
<FUNCTION>
<NAME>GNOME_Panel_RgbData__alloc</NAME>
<RETURNS>GNOME_Panel_RgbData  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>GNOME_Panel_RgbData__free</NAME>
<RETURNS>gpointer  </RETURNS>
gpointer mem, gpointer dat,CORBA_boolean free_strings
</FUNCTION>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_RgbImage_0</NAME>
#define TC_IMPL_TC_GNOME_Panel_RgbImage_0 'g'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_RgbImage_1</NAME>
#define TC_IMPL_TC_GNOME_Panel_RgbImage_1 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_RgbImage_2</NAME>
#define TC_IMPL_TC_GNOME_Panel_RgbImage_2 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_RgbImage_3</NAME>
#define TC_IMPL_TC_GNOME_Panel_RgbImage_3 'm'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_RgbImage_4</NAME>
#define TC_IMPL_TC_GNOME_Panel_RgbImage_4 'e'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_RgbImage_5</NAME>
#define TC_IMPL_TC_GNOME_Panel_RgbImage_5 '_'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_RgbImage_6</NAME>
#define TC_IMPL_TC_GNOME_Panel_RgbImage_6 'p'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_RgbImage_7</NAME>
#define TC_IMPL_TC_GNOME_Panel_RgbImage_7 'a'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_RgbImage_8</NAME>
#define TC_IMPL_TC_GNOME_Panel_RgbImage_8 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_RgbImage_9</NAME>
#define TC_IMPL_TC_GNOME_Panel_RgbImage_9 'e'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_RgbImage_10</NAME>
#define TC_IMPL_TC_GNOME_Panel_RgbImage_10 'l'
</MACRO>
<MACRO>
<NAME>TC_GNOME_Panel_RgbImage</NAME>
#define TC_GNOME_Panel_RgbImage ((CORBA_TypeCode)&TC_GNOME_Panel_RgbImage_struct)
</MACRO>
<FUNCTION>
<NAME>GNOME_Panel_RgbImage__alloc</NAME>
<RETURNS>GNOME_Panel_RgbImage  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>GNOME_Panel_RgbImage__free</NAME>
<RETURNS>gpointer  </RETURNS>
gpointer mem, gpointer dat,CORBA_boolean free_strings
</FUNCTION>
<ENUM>
<NAME>GNOME_Panel_OrientType</NAME>
   typedef enum
   {
      GNOME_Panel_ORIENT_UP,
      GNOME_Panel_ORIENT_DOWN,
      GNOME_Panel_ORIENT_LEFT,
      GNOME_Panel_ORIENT_RIGHT
   }
   GNOME_Panel_OrientType;
</ENUM>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_OrientType_0</NAME>
#define TC_IMPL_TC_GNOME_Panel_OrientType_0 'g'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_OrientType_1</NAME>
#define TC_IMPL_TC_GNOME_Panel_OrientType_1 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_OrientType_2</NAME>
#define TC_IMPL_TC_GNOME_Panel_OrientType_2 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_OrientType_3</NAME>
#define TC_IMPL_TC_GNOME_Panel_OrientType_3 'm'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_OrientType_4</NAME>
#define TC_IMPL_TC_GNOME_Panel_OrientType_4 'e'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_OrientType_5</NAME>
#define TC_IMPL_TC_GNOME_Panel_OrientType_5 '_'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_OrientType_6</NAME>
#define TC_IMPL_TC_GNOME_Panel_OrientType_6 'p'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_OrientType_7</NAME>
#define TC_IMPL_TC_GNOME_Panel_OrientType_7 'a'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_OrientType_8</NAME>
#define TC_IMPL_TC_GNOME_Panel_OrientType_8 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_OrientType_9</NAME>
#define TC_IMPL_TC_GNOME_Panel_OrientType_9 'e'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_OrientType_10</NAME>
#define TC_IMPL_TC_GNOME_Panel_OrientType_10 'l'
</MACRO>
<MACRO>
<NAME>TC_GNOME_Panel_OrientType</NAME>
#define TC_GNOME_Panel_OrientType ((CORBA_TypeCode)&TC_GNOME_Panel_OrientType_struct)
</MACRO>
<ENUM>
<NAME>GNOME_Panel_BackType</NAME>
   typedef enum
   {
      GNOME_Panel_BACK_NONE,
      GNOME_Panel_BACK_COLOR,
      GNOME_Panel_BACK_PIXMAP
   }
   GNOME_Panel_BackType;
</ENUM>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_BackType_0</NAME>
#define TC_IMPL_TC_GNOME_Panel_BackType_0 'g'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_BackType_1</NAME>
#define TC_IMPL_TC_GNOME_Panel_BackType_1 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_BackType_2</NAME>
#define TC_IMPL_TC_GNOME_Panel_BackType_2 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_BackType_3</NAME>
#define TC_IMPL_TC_GNOME_Panel_BackType_3 'm'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_BackType_4</NAME>
#define TC_IMPL_TC_GNOME_Panel_BackType_4 'e'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_BackType_5</NAME>
#define TC_IMPL_TC_GNOME_Panel_BackType_5 '_'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_BackType_6</NAME>
#define TC_IMPL_TC_GNOME_Panel_BackType_6 'p'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_BackType_7</NAME>
#define TC_IMPL_TC_GNOME_Panel_BackType_7 'a'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_BackType_8</NAME>
#define TC_IMPL_TC_GNOME_Panel_BackType_8 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_BackType_9</NAME>
#define TC_IMPL_TC_GNOME_Panel_BackType_9 'e'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_BackType_10</NAME>
#define TC_IMPL_TC_GNOME_Panel_BackType_10 'l'
</MACRO>
<MACRO>
<NAME>TC_GNOME_Panel_BackType</NAME>
#define TC_GNOME_Panel_BackType ((CORBA_TypeCode)&TC_GNOME_Panel_BackType_struct)
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_BackInfoType_0</NAME>
#define TC_IMPL_TC_GNOME_Panel_BackInfoType_0 'g'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_BackInfoType_1</NAME>
#define TC_IMPL_TC_GNOME_Panel_BackInfoType_1 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_BackInfoType_2</NAME>
#define TC_IMPL_TC_GNOME_Panel_BackInfoType_2 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_BackInfoType_3</NAME>
#define TC_IMPL_TC_GNOME_Panel_BackInfoType_3 'm'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_BackInfoType_4</NAME>
#define TC_IMPL_TC_GNOME_Panel_BackInfoType_4 'e'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_BackInfoType_5</NAME>
#define TC_IMPL_TC_GNOME_Panel_BackInfoType_5 '_'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_BackInfoType_6</NAME>
#define TC_IMPL_TC_GNOME_Panel_BackInfoType_6 'p'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_BackInfoType_7</NAME>
#define TC_IMPL_TC_GNOME_Panel_BackInfoType_7 'a'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_BackInfoType_8</NAME>
#define TC_IMPL_TC_GNOME_Panel_BackInfoType_8 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_BackInfoType_9</NAME>
#define TC_IMPL_TC_GNOME_Panel_BackInfoType_9 'e'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Panel_BackInfoType_10</NAME>
#define TC_IMPL_TC_GNOME_Panel_BackInfoType_10 'l'
</MACRO>
<MACRO>
<NAME>TC_GNOME_Panel_BackInfoType</NAME>
#define TC_GNOME_Panel_BackInfoType ((CORBA_TypeCode)&TC_GNOME_Panel_BackInfoType_struct)
</MACRO>
<FUNCTION>
<NAME>GNOME_Panel_BackInfoType__alloc</NAME>
<RETURNS>GNOME_Panel_BackInfoType  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>GNOME_Panel_BackInfoType__free</NAME>
<RETURNS>gpointer  </RETURNS>
gpointer mem, gpointer dat,CORBA_boolean free_strings
</FUNCTION>
<MACRO>
<NAME>ORBIT_DECL_GNOME_PanelSpot</NAME>
#define ORBIT_DECL_GNOME_PanelSpot 1
</MACRO>
<MACRO>
<NAME>GNOME_PanelSpot__free</NAME>
#define GNOME_PanelSpot__free CORBA_Object__free
</MACRO>
<TYPEDEF>
<NAME>GNOME_PanelSpot</NAME>
   typedef CORBA_Object GNOME_PanelSpot;
</TYPEDEF>
<VARIABLE>
<NAME>GNOME_PanelSpot__classid</NAME>
   extern CORBA_unsigned_long GNOME_PanelSpot__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_PanelSpot_0</NAME>
#define TC_IMPL_TC_GNOME_PanelSpot_0 'g'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_PanelSpot_1</NAME>
#define TC_IMPL_TC_GNOME_PanelSpot_1 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_PanelSpot_2</NAME>
#define TC_IMPL_TC_GNOME_PanelSpot_2 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_PanelSpot_3</NAME>
#define TC_IMPL_TC_GNOME_PanelSpot_3 'm'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_PanelSpot_4</NAME>
#define TC_IMPL_TC_GNOME_PanelSpot_4 'e'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_PanelSpot_5</NAME>
#define TC_IMPL_TC_GNOME_PanelSpot_5 '_'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_PanelSpot_6</NAME>
#define TC_IMPL_TC_GNOME_PanelSpot_6 'p'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_PanelSpot_7</NAME>
#define TC_IMPL_TC_GNOME_PanelSpot_7 'a'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_PanelSpot_8</NAME>
#define TC_IMPL_TC_GNOME_PanelSpot_8 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_PanelSpot_9</NAME>
#define TC_IMPL_TC_GNOME_PanelSpot_9 'e'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_PanelSpot_10</NAME>
#define TC_IMPL_TC_GNOME_PanelSpot_10 'l'
</MACRO>
<MACRO>
<NAME>TC_GNOME_PanelSpot</NAME>
#define TC_GNOME_PanelSpot ((CORBA_TypeCode)&TC_GNOME_PanelSpot_struct)
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_GNOME_Applet</NAME>
#define ORBIT_DECL_GNOME_Applet 1
</MACRO>
<MACRO>
<NAME>GNOME_Applet__free</NAME>
#define GNOME_Applet__free CORBA_Object__free
</MACRO>
<TYPEDEF>
<NAME>GNOME_Applet</NAME>
   typedef CORBA_Object GNOME_Applet;
</TYPEDEF>
<VARIABLE>
<NAME>GNOME_Applet__classid</NAME>
   extern CORBA_unsigned_long GNOME_Applet__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Applet_0</NAME>
#define TC_IMPL_TC_GNOME_Applet_0 'g'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Applet_1</NAME>
#define TC_IMPL_TC_GNOME_Applet_1 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Applet_2</NAME>
#define TC_IMPL_TC_GNOME_Applet_2 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Applet_3</NAME>
#define TC_IMPL_TC_GNOME_Applet_3 'm'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Applet_4</NAME>
#define TC_IMPL_TC_GNOME_Applet_4 'e'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Applet_5</NAME>
#define TC_IMPL_TC_GNOME_Applet_5 '_'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Applet_6</NAME>
#define TC_IMPL_TC_GNOME_Applet_6 'p'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Applet_7</NAME>
#define TC_IMPL_TC_GNOME_Applet_7 'a'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Applet_8</NAME>
#define TC_IMPL_TC_GNOME_Applet_8 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Applet_9</NAME>
#define TC_IMPL_TC_GNOME_Applet_9 'e'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_Applet_10</NAME>
#define TC_IMPL_TC_GNOME_Applet_10 'l'
</MACRO>
<MACRO>
<NAME>TC_GNOME_Applet</NAME>
#define TC_GNOME_Applet ((CORBA_TypeCode)&TC_GNOME_Applet_struct)
</MACRO>
<MACRO>
<NAME>ORBIT_DECL_GNOME_StatusSpot</NAME>
#define ORBIT_DECL_GNOME_StatusSpot 1
</MACRO>
<MACRO>
<NAME>GNOME_StatusSpot__free</NAME>
#define GNOME_StatusSpot__free CORBA_Object__free
</MACRO>
<TYPEDEF>
<NAME>GNOME_StatusSpot</NAME>
   typedef CORBA_Object GNOME_StatusSpot;
</TYPEDEF>
<VARIABLE>
<NAME>GNOME_StatusSpot__classid</NAME>
   extern CORBA_unsigned_long GNOME_StatusSpot__classid;
</VARIABLE>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_StatusSpot_0</NAME>
#define TC_IMPL_TC_GNOME_StatusSpot_0 'g'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_StatusSpot_1</NAME>
#define TC_IMPL_TC_GNOME_StatusSpot_1 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_StatusSpot_2</NAME>
#define TC_IMPL_TC_GNOME_StatusSpot_2 'o'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_StatusSpot_3</NAME>
#define TC_IMPL_TC_GNOME_StatusSpot_3 'm'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_StatusSpot_4</NAME>
#define TC_IMPL_TC_GNOME_StatusSpot_4 'e'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_StatusSpot_5</NAME>
#define TC_IMPL_TC_GNOME_StatusSpot_5 '_'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_StatusSpot_6</NAME>
#define TC_IMPL_TC_GNOME_StatusSpot_6 'p'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_StatusSpot_7</NAME>
#define TC_IMPL_TC_GNOME_StatusSpot_7 'a'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_StatusSpot_8</NAME>
#define TC_IMPL_TC_GNOME_StatusSpot_8 'n'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_StatusSpot_9</NAME>
#define TC_IMPL_TC_GNOME_StatusSpot_9 'e'
</MACRO>
<MACRO>
<NAME>TC_IMPL_TC_GNOME_StatusSpot_10</NAME>
#define TC_IMPL_TC_GNOME_StatusSpot_10 'l'
</MACRO>
<MACRO>
<NAME>TC_GNOME_StatusSpot</NAME>
#define TC_GNOME_StatusSpot ((CORBA_TypeCode)&TC_GNOME_StatusSpot_struct)
</MACRO>
<FUNCTION>
<NAME>POA_GNOME_Panel__init</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_GNOME_Panel__fini</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_GNOME_PanelSpot__init</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_GNOME_PanelSpot__fini</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_GNOME_Applet__init</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_GNOME_Applet__fini</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_GNOME_StatusSpot__init</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>POA_GNOME_StatusSpot__fini</NAME>
<RETURNS>void  </RETURNS>
PortableServer_Servant servant,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_Panel_add_applet</NAME>
<RETURNS>GNOME_PanelSpot  </RETURNS>
GNOME_Panel _obj,const GNOME_Applet panel_applet,const CORBA_char * goad_id,CORBA_char ** cfgpath,CORBA_char ** globcfgpath,CORBA_unsigned_long * winid,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_Panel_add_applet_full</NAME>
<RETURNS>GNOME_PanelSpot  </RETURNS>
GNOME_Panel _obj,const GNOME_Appletpanel_applet,const CORBA_char * goad_id,const CORBA_short panel,const CORBA_short pos,CORBA_char ** cfgpath,CORBA_char ** globcfgpath,CORBA_unsigned_long * winid,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_Panel_quit</NAME>
<RETURNS>void  </RETURNS>
GNOME_Panel _obj, CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_Panel__get_in_drag</NAME>
<RETURNS>CORBA_boolean  </RETURNS>
GNOME_Panel _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_Panel_add_status</NAME>
<RETURNS>GNOME_StatusSpot  </RETURNS>
GNOME_Panel _obj,CORBA_unsigned_long * winid,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_Panel_notice_config_changes</NAME>
<RETURNS>void  </RETURNS>
GNOME_Panel _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_PanelSpot__get_tooltip</NAME>
<RETURNS>CORBA_char  *</RETURNS>
GNOME_PanelSpot _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_PanelSpot__set_tooltip</NAME>
<RETURNS>void  </RETURNS>
GNOME_PanelSpot _obj,const CORBA_char * value,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_PanelSpot__get_parent_panel</NAME>
<RETURNS>CORBA_short  </RETURNS>
GNOME_PanelSpot _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_PanelSpot__get_spot_pos</NAME>
<RETURNS>CORBA_short  </RETURNS>
GNOME_PanelSpot _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_PanelSpot__get_parent_orient</NAME>
<RETURNS>GNOME_Panel_OrientType  </RETURNS>
GNOME_PanelSpot_obj,CORBA_Environment* ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_PanelSpot__get_parent_size</NAME>
<RETURNS>CORBA_short  </RETURNS>
GNOME_PanelSpot _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_PanelSpot__get_free_space</NAME>
<RETURNS>CORBA_short  </RETURNS>
GNOME_PanelSpot _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_PanelSpot__get_send_position</NAME>
<RETURNS>CORBA_boolean  </RETURNS>
GNOME_PanelSpot _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_PanelSpot__set_send_position</NAME>
<RETURNS>void  </RETURNS>
GNOME_PanelSpot _obj,const CORBA_boolean value,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_PanelSpot__get_send_draw</NAME>
<RETURNS>CORBA_boolean  </RETURNS>
GNOME_PanelSpot _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_PanelSpot__set_send_draw</NAME>
<RETURNS>void  </RETURNS>
GNOME_PanelSpot _obj,const CORBA_boolean value,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_PanelSpot__get_rgb_background</NAME>
<RETURNS>GNOME_Panel_RgbImage  *</RETURNS>
GNOME_PanelSpot_obj,CORBA_Environment* ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_PanelSpot_register_us</NAME>
<RETURNS>void  </RETURNS>
GNOME_PanelSpot _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_PanelSpot_unregister_us</NAME>
<RETURNS>void  </RETURNS>
GNOME_PanelSpot _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_PanelSpot_abort_load</NAME>
<RETURNS>void  </RETURNS>
GNOME_PanelSpot _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_PanelSpot_show_menu</NAME>
<RETURNS>void  </RETURNS>
GNOME_PanelSpot _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_PanelSpot_drag_start</NAME>
<RETURNS>void  </RETURNS>
GNOME_PanelSpot _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_PanelSpot_drag_stop</NAME>
<RETURNS>void  </RETURNS>
GNOME_PanelSpot _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_PanelSpot_add_callback</NAME>
<RETURNS>void  </RETURNS>
GNOME_PanelSpot _obj,const CORBA_char * callback_name,const CORBA_char * stock_item,const CORBA_char * menuitem_text,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_PanelSpot_remove_callback</NAME>
<RETURNS>void  </RETURNS>
GNOME_PanelSpot _obj,const CORBA_char * callback_name,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_PanelSpot_callback_set_sensitive</NAME>
<RETURNS>void  </RETURNS>
GNOME_PanelSpot _obj,const CORBA_char *callback_name,const CORBA_boolean sensitive,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_PanelSpot_sync_config</NAME>
<RETURNS>void  </RETURNS>
GNOME_PanelSpot _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_PanelSpot_done_session_save</NAME>
<RETURNS>void  </RETURNS>
GNOME_PanelSpot _obj,const CORBA_boolean ret,const CORBA_unsigned_long cookie,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_Applet_change_orient</NAME>
<RETURNS>void  </RETURNS>
GNOME_Applet _obj,const GNOME_Panel_OrientType orient,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_Applet_do_callback</NAME>
<RETURNS>void  </RETURNS>
GNOME_Applet _obj,const CORBA_char * callback_name,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_Applet_session_save</NAME>
<RETURNS>CORBA_boolean  </RETURNS>
GNOME_Applet _obj,const CORBA_char * cfgpath,const CORBA_char * global_cfgpath,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_Applet_back_change</NAME>
<RETURNS>void  </RETURNS>
GNOME_Applet _obj,const GNOME_Panel_BackInfoType * backing,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_Applet_set_tooltips_state</NAME>
<RETURNS>void  </RETURNS>
GNOME_Applet _obj,const CORBA_boolean enabled,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_Applet__get_goad_id</NAME>
<RETURNS>CORBA_char  *</RETURNS>
GNOME_Applet _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_Applet_draw</NAME>
<RETURNS>void  </RETURNS>
GNOME_Applet _obj, CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_Applet_save_session</NAME>
<RETURNS>void  </RETURNS>
GNOME_Applet _obj,const CORBA_char * cfgpath,const CORBA_char * global_cfgpath,const CORBA_unsigned_long cookie,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_Applet_change_size</NAME>
<RETURNS>void  </RETURNS>
GNOME_Applet _obj, const CORBA_short size,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_Applet_change_position</NAME>
<RETURNS>void  </RETURNS>
GNOME_Applet _obj, const CORBA_short x,const CORBA_short y,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_Applet_freeze_changes</NAME>
<RETURNS>void  </RETURNS>
GNOME_Applet _obj,CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_Applet_thaw_changes</NAME>
<RETURNS>void  </RETURNS>
GNOME_Applet _obj, CORBA_Environment * ev
</FUNCTION>
<FUNCTION>
<NAME>GNOME_StatusSpot_remove</NAME>
<RETURNS>void  </RETURNS>
GNOME_StatusSpot _obj,CORBA_Environment * ev
</FUNCTION>
