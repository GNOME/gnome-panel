<!-- ##### SECTION Title ##### -->
StatusDocklet

<!-- ##### SECTION Short_Description ##### -->
Simple way to embed a small window in the panel

<!-- ##### SECTION Long_Description ##### -->
<para>
Some apps want to embed a very small icon or widget in the panel to display
the status of the app.  This can be done without the operational overhead of
an applet.  The status docklet will embed a 22 by 22 window inside the panel.
This is not a separate applet and thus is minimally intrusive to the user and
is meant for very temporary status displays for which a full applet would not
be appropriate.
</para>

<para>
The way #StatusDocklet works is a little different from how the #AppletWidget
works.  Firstly, #StatusDocklet object is not a widget, it is just an abstract
GTK+ object.  You create a new #StatusDocklet object with #status_docklet_new
or #status_docklet_new and then bind the "build_plug" signal which is emitted
when the panel was contacted and a widget must be built.  After binding the
"build_plug" signal, you call #status_docklet_run to actually start trying to
contacting the panel.  #StatusDocklet is safe to use without a panel.  By
default it will try to locate a panel for 15 minutes and after that it will
give up.  It will also handle panel restarts by default.  If it does, your
widget will be destroyed and "build_plug" will be emitted again when the new
panel starts.  Even though the panel will never restart by itself, the user
might not run session management and thus might restart panel by hand, or due
to a bug, the panel might crash and restart itself.
</para>

<para>
Note that you should use #gnome_CORBA_init rather then #gnome_init when you
want to use the status docklet as corba has to be initialized for the status
docklet to work.
</para>

<para>
Here is a short example of how to use the status docklet

  <example>
    <title>Sample usage of the StatusDocklet object</title>
    <programlisting>
/* this can be a global since you probably only need one status window
   for your app */
GtkObject *status;

...

static void
build_our_plug(StatusDocklet *docklet, GtkWidget *plug, gpointer data)
{
        GtkWidget *label;
	/* an extremely simple status, you probably want an icon */
	label = gtk_label_new("#");
	gtk_widget_show(label);

	/* add the status to the plug */
	gtk_container_add(GTK_CONTAINER(plug), label);
}

...

/* in your main function you would do something like */
status = status_docklet_new();

/* connect our widget building function */
gtk_signal_connect(GTK_OBJECT(status), "build_plug",
                   GTK_SIGNAL_FUNC(build_our_plug),
		   NULL);

/* "run" the docklet */
status_docklet_run(STATUS_DOCKLET(status));

...
    </programlisting>
  </example>
</para>



<!-- ##### SECTION See_Also ##### -->
<para>
#AppletWidget, #GtkPlug
</para>


<!-- ##### STRUCT StatusDocklet ##### -->
<para>

</para>

@plug:  The #GtkPlug widget that's embedded inside the panel

<!-- ##### FUNCTION status_docklet_new ##### -->
<para>

</para>

@Returns: 


<!-- ##### FUNCTION status_docklet_new_full ##### -->
<para>

</para>

@maximum_retries: 
@handle_restarts: 
@Returns: 


<!-- ##### FUNCTION status_docklet_run ##### -->
<para>

</para>

@docklet: 


<!-- ##### SIGNAL StatusDocklet::build-plug ##### -->
<para>
This signal is emitted when you actually need to build the widget that
you want to place inside the status docklet.  It should be 22 by 22, and
if it is larger it will be cropped.
</para>

@statusdocklet: the object which received the signal.
@arg1: 

