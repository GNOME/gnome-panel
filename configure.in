AC_INIT(panel)

AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(gnome-core, 1.1.1)

AM_MAINTAINER_MODE

AM_ACLOCAL_INCLUDE(macros)

dnl
dnl let applications configure for gnome
dnl
gnome_cv_use_gnome=yes

GNOME_INIT

AC_ISC_POSIX
AC_PROG_CC
AC_STDC_HEADERS
AC_ARG_PROGRAM
AM_PROG_LIBTOOL
AM_PROG_LEX
AC_PROG_YACC

GNOME_COMPILE_WARNINGS

GNOME_X_CHECKS
GNOME_XML_CHECK

AM_PATH_GTK(1.2.5, ,[
AC_MSG_ERROR(Please upgrade your GTK+)])

dnl utility conditional
AM_CONDITIONAL(FALSE, test "x" = "y")

ALL_LINGUAS="ca cs da de el en_GB es et eu fi fr ga gl hu it ja ko nl no pl pt pt_BR ru sk sv uk wa zh_TW.Big5"
AM_GNU_GETTEXT

AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)

AC_CHECK_HEADERS(dlfcn.h dl.h syslog.h tcpd.h)
AC_CHECK_LIB(dl, dlopen, DL_LIB="-ldl",[
AC_CHECK_LIB(dld, shl_load, DL_LIB="-ldld",[
AC_CHECK_FUNCS(dlopen, DL_LIB="",
AC_MSG_ERROR(Dynamic linking is not available on this platform.  Some
apps, like panel, will not run properly.))
])])
AC_SUBST(DL_LIB)

for dir in `(IFS=:; for i in $PATH; do echo $i ; done)` ; do
  if test -f $dir/orbit-idl ; then
     orbit_prefix=`echo $dir | sed 's%/bin$%%' |sed 's%/bin/$%%'`
     break
  fi
done

ORB_LIBS="$ORBIT_LIBS"
ORB_CFLAGS="$ORBIT_CFLAGS"

AC_SUBST(ORB_LIBS)
AC_SUBST(ORB_CFLAGS)

dnl
dnl GdkPixBuf
dnl
PIXBUF_CFLAGS=`$GNOME_CONFIG --cflags gdk_pixbuf`
PIXBUF_LIBS=`$GNOME_CONFIG --libs gdk_pixbuf`
AC_SUBST(PIXBUF_CFLAGS)
AC_SUBST(PIXBUF_LIBS)
if test "x$PIXBUF_CFLAGS" = x ; then
       AC_MSG_ERROR(GdkPixbuf library is required for the panel)
fi

dnl
dnl Gnome Terminal
dnl
ZVT_LIBS=`$GNOME_CONFIG --libs zvt`
AC_SUBST(ZVT_LIBS)

dnl
dnl gnome-session
dnl
dnl $GNOME_HAVE_SM comes from GNOME_X_CHECKS
AM_CONDITIONAL(SESSION, test "$GNOME_HAVE_SM" = true)

AC_MSG_CHECKING("whether to use TCP wrappers")
LIBWRAP_PATH=""
for I in $LDFLAGS $LIBS -L/usr/lib -L/usr/local/lib; do
        case "$I" in
        -L*)
        THEFILE="`echo $I | sed -e 's,^-L,,'`"
        echo "From $I, checking in dir $THEFILE for libwrap.a" 1>&5
        if test -f $THEFILE/libwrap.a; then
                LIBWRAP_PATH="$THEFILE"
                echo "Found in $LIBWRAP_PATH" 1>&5
                break
        fi
	        esac
done
if test -n "$LIBWRAP_PATH"; then
        AC_MSG_RESULT(yes)
else
        AC_MSG_RESULT(no)
fi

if test -n "$LIBWRAP_PATH"; then
        nm $LIBWRAP_PATH/libwrap.* | grep 'T setenv' && LIBWRAP_PATH=""
        if test -z "$LIBWRAP_PATH"; then
                echo "*********************************************************"
                echo " You have a broken TCP wrappers library (setenv included)"
                echo " Please get the latest TCP wrappers package from your OS"
                echo " vendor, or recompile TCP wrappers to not include a"
                echo " setenv() implementation."
                echo
                echo "Not using TCP wrappers after all."
                echo "*********************************************************"
        fi
fi
dnl We need the header files too!
if test "$ac_cv_header_syslog_h" != yes || test "$ac_cv_header_tcpd_h" != yes; then
	echo "Resetting $LIBWRAP_PATH because syslog is $ac_cv_header_syslog_h and tcpd is $ac_cv_header_tcpd_h" 1>&5
	LIBWRAP_PATH=""
fi

dnl find out if we need -lnsl or whatever
LIBWRAP_NSL=
if test -n "$LIBWRAP_PATH"; then
        AC_MSG_CHECKING(whether -lwrap requires -lnsl)
        ORIG_LIBS="$LIBS"
        LIBS="-L$LIBWRAP_PATH -lwrap $LIBS"
        AC_TRY_LINK([
extern int hosts_access;
int allow_severity, deny_severity;
], [return hosts_access;], ,[
dnl try with -lnsl
OLD_LIBS="$LIBS"
LIBS="$LIBS -lnsl"
AC_TRY_LINK([
extern int hosts_access;
int allow_severity, deny_severity;
], [return hosts_access;], LIBWRAP_NSL="-lnsl",
LIBWRAP_PATH="")
LIBS="$OLD_LIBS"
])
        LIBS="$ORIG_LIBS"
if test -n "$LIB_NSL"; then
        AC_MSG_RESULT(yes)
        LIBS="$LIBS $LIB_NSL"
else
        AC_MSG_RESULT(no)
fi
fi
LIBWRAP_LIBS=
if test -n "$LIBWRAP_PATH"; then
	LIBWRAP_LIBS="-L$LIBWRAP_PATH -lwrap $LIBWRAP_NSL"
	AC_DEFINE(HAVE_HOSTS_ACCESS)
fi
AC_SUBST(LIBWRAP_LIBS)

AC_ARG_WITH(window-manager,
[  --with-window-manager=NAME
			   Specify default window manager],[
    WINDOW_MANAGER="$with_window_manager"], [
    dnl gnome-wm is a shell script that starts the WM.
    WINDOW_MANAGER=gnome-wm])
AC_SUBST(WINDOW_MANAGER)

dnl help-browser
dnl I found `inet_aton' in -lresolv on solaris
oLIBS="$LIBS"
RES_LIBS=
# the following two are covered by X11 too.  If inet_aton is found in
# plain libc, -lsocket or -lnsl, RES_LIBS will be empty.
AC_CHECK_FUNC(connect,,[AC_CHECK_LIB(socket,connect)])
AC_CHECK_FUNC(gethostbyname,,[AC_CHECK_LIB(nsl,gethostbyname)])
AC_CHECK_FUNC(inet_aton,,[AC_CHECK_LIB(resolv,inet_aton,RES_LIBS="-lresolv")])
AC_SUBST(RES_LIBS)
LIBS="$oLIBS"

dnl
dnl Check for zvt_term_reset
dnl
oLIBS="$LIBS"
LIBS="$GNOMEUI_LIBS $GNOME_LIBDIR $ZVT_LIBS"
AC_CHECK_FUNC(zvt_term_reset,[AC_DEFINE(HAVE_ZVT_TERM_RESET)])
LIBS="$oLIBS"

dnl
dnl Place to look for KDE menus
dnl
AC_ARG_WITH(kde-datadir, [  --with-kde-datadir=DIR         Location of KDE data])

if test "x$with_kde_datadir" = x ; then
  kde_datadir=/usr/share
else
  kde_datadir=$with_kde_datadir
fi

AC_DEFINE_UNQUOTED(KDE_MENUDIR, "$kde_datadir/applnk")
AC_DEFINE_UNQUOTED(KDE_ICONDIR, "$kde_datadir/icons")
AC_DEFINE_UNQUOTED(KDE_MINI_ICONDIR, "$kde_datadir/icons/mini")
dnl AC_CONFIG_SUBDIRS(gemvt)

AC_OUTPUT([
Makefile
gnome-core.spec
po/Makefile.in
macros/Makefile
panel/Makefile
applets/Makefile
applets/applet-dirs/Makefile
applets/gen_util/Makefile
applets/fish/Makefile
applets/desk-guide/Makefile
applets/tasklist/Makefile
core-docs/Makefile
desktop-links/Makefile
gnome-terminal/Makefile
gnome-terminal/C/Makefile
gnome-terminal/da/Makefile
gnome-terminal/es/Makefile
gnome-terminal/no/Makefile
help-browser/Makefile
help-browser/gnome-man2html/Makefile
help-browser/gnome-info2html/Makefile
help-browser/help/Makefile
help-browser/help/C/Makefile
help-browser/help/ca/Makefile
help-browser/help/da/Makefile
help-browser/help/el/Makefile
help-browser/help/es/Makefile
help-browser/help/et/Makefile
help-browser/help/eu/Makefile
help-browser/help/fr/Makefile
help-browser/help/hu/Makefile
help-browser/help/it/Makefile
help-browser/help/ja/Makefile
help-browser/help/ko/Makefile
help-browser/help/no/Makefile
help-browser/help/uk/Makefile
help-browser/help/wa/Makefile
gnome-hint/Makefile
gnome-about/Makefile
gmenu/Makefile
gnome-edit/Makefile
idl/Makefile
pixmaps/Makefile
gsm/Makefile
gsm/default.session.5
gsm/gnome-session.1
smproxy/Makefile
intl/Makefile])


echo ""
echo " *** IMPORTANT *** "
echo ""
echo "This is a development version of gnome-core."
echo ""
echo "While we try our best to keep it stable, it may not compile,"
echo "or the applications may be incomplete/unstable"
echo ""
echo "Distributions should *NOT* ship a development package of this gnome-core."
echo "Do not ship the headers and do not ship the CORBA IDL files in idl/."
echo "Doing otherwise will do no favors to the community."
echo ""
echo " *** You may want to use the stable gnome-core 1.0 instead. ***"
echo ""
echo "If you are using this source tree from CVS, please run:"
echo "	cvs update -r gnome-core-1-0"
echo "now, or get the latest stable release at:"
echo " 	ftp://ftp.gnome.org/pub/GNOME/stable/sources/gnome-core/"
echo ""

